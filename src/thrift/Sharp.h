/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Sharp_H
#define Sharp_H

#include <thrift/TDispatchProcessor.h>
#include "ib_types.h"

namespace sharp { namespace api {

class SharpIf {
 public:
  virtual ~SharpIf() {}
  virtual void ping(PingResponse& _return, const PingRequest& request) = 0;
  virtual int64_t getOrderID() = 0;
  virtual void placeOrder(OrderResponse& _return, const ContractRequest& c_req, const OrderRequest& o_req) = 0;
  virtual void cancelOrder(OrderResponse& _return, const int64_t o_id) = 0;
  virtual void orderStatus(OrderResponse& _return, const int64_t o_id) = 0;
};

class SharpIfFactory {
 public:
  typedef SharpIf Handler;

  virtual ~SharpIfFactory() {}

  virtual SharpIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SharpIf* /* handler */) = 0;
};

class SharpIfSingletonFactory : virtual public SharpIfFactory {
 public:
  SharpIfSingletonFactory(const boost::shared_ptr<SharpIf>& iface) : iface_(iface) {}
  virtual ~SharpIfSingletonFactory() {}

  virtual SharpIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SharpIf* /* handler */) {}

 protected:
  boost::shared_ptr<SharpIf> iface_;
};

class SharpNull : virtual public SharpIf {
 public:
  virtual ~SharpNull() {}
  void ping(PingResponse& /* _return */, const PingRequest& /* request */) {
    return;
  }
  int64_t getOrderID() {
    int64_t _return = 0;
    return _return;
  }
  void placeOrder(OrderResponse& /* _return */, const ContractRequest& /* c_req */, const OrderRequest& /* o_req */) {
    return;
  }
  void cancelOrder(OrderResponse& /* _return */, const int64_t /* o_id */) {
    return;
  }
  void orderStatus(OrderResponse& /* _return */, const int64_t /* o_id */) {
    return;
  }
};


class Sharp_ping_args {
 public:

  static const char* ascii_fingerprint; // = "2C32A565725135A023CB591D1A993CFD";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

  Sharp_ping_args(const Sharp_ping_args&);
  Sharp_ping_args& operator=(const Sharp_ping_args&);
  Sharp_ping_args() {
  }

  virtual ~Sharp_ping_args() throw();
  PingRequest request;

  void __set_request(const PingRequest& val);

  bool operator == (const Sharp_ping_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Sharp_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sharp_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_ping_args& obj);
};


class Sharp_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "2C32A565725135A023CB591D1A993CFD";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};


  virtual ~Sharp_ping_pargs() throw();
  const PingRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_ping_pargs& obj);
};

typedef struct _Sharp_ping_result__isset {
  _Sharp_ping_result__isset() : success(false) {}
  bool success :1;
} _Sharp_ping_result__isset;

class Sharp_ping_result {
 public:

  static const char* ascii_fingerprint; // = "3A26B8DD823AB72F2FE94404F3D36070";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x26,0xB8,0xDD,0x82,0x3A,0xB7,0x2F,0x2F,0xE9,0x44,0x04,0xF3,0xD3,0x60,0x70};

  Sharp_ping_result(const Sharp_ping_result&);
  Sharp_ping_result& operator=(const Sharp_ping_result&);
  Sharp_ping_result() {
  }

  virtual ~Sharp_ping_result() throw();
  PingResponse success;

  _Sharp_ping_result__isset __isset;

  void __set_success(const PingResponse& val);

  bool operator == (const Sharp_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Sharp_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sharp_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_ping_result& obj);
};

typedef struct _Sharp_ping_presult__isset {
  _Sharp_ping_presult__isset() : success(false) {}
  bool success :1;
} _Sharp_ping_presult__isset;

class Sharp_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "3A26B8DD823AB72F2FE94404F3D36070";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x26,0xB8,0xDD,0x82,0x3A,0xB7,0x2F,0x2F,0xE9,0x44,0x04,0xF3,0xD3,0x60,0x70};


  virtual ~Sharp_ping_presult() throw();
  PingResponse* success;

  _Sharp_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Sharp_ping_presult& obj);
};


class Sharp_getOrderID_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Sharp_getOrderID_args(const Sharp_getOrderID_args&);
  Sharp_getOrderID_args& operator=(const Sharp_getOrderID_args&);
  Sharp_getOrderID_args() {
  }

  virtual ~Sharp_getOrderID_args() throw();

  bool operator == (const Sharp_getOrderID_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Sharp_getOrderID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sharp_getOrderID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_getOrderID_args& obj);
};


class Sharp_getOrderID_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Sharp_getOrderID_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_getOrderID_pargs& obj);
};

typedef struct _Sharp_getOrderID_result__isset {
  _Sharp_getOrderID_result__isset() : success(false) {}
  bool success :1;
} _Sharp_getOrderID_result__isset;

class Sharp_getOrderID_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  Sharp_getOrderID_result(const Sharp_getOrderID_result&);
  Sharp_getOrderID_result& operator=(const Sharp_getOrderID_result&);
  Sharp_getOrderID_result() : success(0) {
  }

  virtual ~Sharp_getOrderID_result() throw();
  int64_t success;

  _Sharp_getOrderID_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Sharp_getOrderID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Sharp_getOrderID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sharp_getOrderID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_getOrderID_result& obj);
};

typedef struct _Sharp_getOrderID_presult__isset {
  _Sharp_getOrderID_presult__isset() : success(false) {}
  bool success :1;
} _Sharp_getOrderID_presult__isset;

class Sharp_getOrderID_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~Sharp_getOrderID_presult() throw();
  int64_t* success;

  _Sharp_getOrderID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Sharp_getOrderID_presult& obj);
};


class Sharp_placeOrder_args {
 public:

  static const char* ascii_fingerprint; // = "107A0333194C3287B8F93A371EF11C3F";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x7A,0x03,0x33,0x19,0x4C,0x32,0x87,0xB8,0xF9,0x3A,0x37,0x1E,0xF1,0x1C,0x3F};

  Sharp_placeOrder_args(const Sharp_placeOrder_args&);
  Sharp_placeOrder_args& operator=(const Sharp_placeOrder_args&);
  Sharp_placeOrder_args() {
  }

  virtual ~Sharp_placeOrder_args() throw();
  ContractRequest c_req;
  OrderRequest o_req;

  void __set_c_req(const ContractRequest& val);

  void __set_o_req(const OrderRequest& val);

  bool operator == (const Sharp_placeOrder_args & rhs) const
  {
    if (!(c_req == rhs.c_req))
      return false;
    if (!(o_req == rhs.o_req))
      return false;
    return true;
  }
  bool operator != (const Sharp_placeOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sharp_placeOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_placeOrder_args& obj);
};


class Sharp_placeOrder_pargs {
 public:

  static const char* ascii_fingerprint; // = "107A0333194C3287B8F93A371EF11C3F";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x7A,0x03,0x33,0x19,0x4C,0x32,0x87,0xB8,0xF9,0x3A,0x37,0x1E,0xF1,0x1C,0x3F};


  virtual ~Sharp_placeOrder_pargs() throw();
  const ContractRequest* c_req;
  const OrderRequest* o_req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_placeOrder_pargs& obj);
};

typedef struct _Sharp_placeOrder_result__isset {
  _Sharp_placeOrder_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Sharp_placeOrder_result__isset;

class Sharp_placeOrder_result {
 public:

  static const char* ascii_fingerprint; // = "DC1C3122B8F2BEF805647403197F0FF3";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x1C,0x31,0x22,0xB8,0xF2,0xBE,0xF8,0x05,0x64,0x74,0x03,0x19,0x7F,0x0F,0xF3};

  Sharp_placeOrder_result(const Sharp_placeOrder_result&);
  Sharp_placeOrder_result& operator=(const Sharp_placeOrder_result&);
  Sharp_placeOrder_result() {
  }

  virtual ~Sharp_placeOrder_result() throw();
  OrderResponse success;
  Exception e;

  _Sharp_placeOrder_result__isset __isset;

  void __set_success(const OrderResponse& val);

  void __set_e(const Exception& val);

  bool operator == (const Sharp_placeOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Sharp_placeOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sharp_placeOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_placeOrder_result& obj);
};

typedef struct _Sharp_placeOrder_presult__isset {
  _Sharp_placeOrder_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Sharp_placeOrder_presult__isset;

class Sharp_placeOrder_presult {
 public:

  static const char* ascii_fingerprint; // = "DC1C3122B8F2BEF805647403197F0FF3";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x1C,0x31,0x22,0xB8,0xF2,0xBE,0xF8,0x05,0x64,0x74,0x03,0x19,0x7F,0x0F,0xF3};


  virtual ~Sharp_placeOrder_presult() throw();
  OrderResponse* success;
  Exception e;

  _Sharp_placeOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Sharp_placeOrder_presult& obj);
};


class Sharp_cancelOrder_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  Sharp_cancelOrder_args(const Sharp_cancelOrder_args&);
  Sharp_cancelOrder_args& operator=(const Sharp_cancelOrder_args&);
  Sharp_cancelOrder_args() : o_id(0) {
  }

  virtual ~Sharp_cancelOrder_args() throw();
  int64_t o_id;

  void __set_o_id(const int64_t val);

  bool operator == (const Sharp_cancelOrder_args & rhs) const
  {
    if (!(o_id == rhs.o_id))
      return false;
    return true;
  }
  bool operator != (const Sharp_cancelOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sharp_cancelOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_cancelOrder_args& obj);
};


class Sharp_cancelOrder_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~Sharp_cancelOrder_pargs() throw();
  const int64_t* o_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_cancelOrder_pargs& obj);
};

typedef struct _Sharp_cancelOrder_result__isset {
  _Sharp_cancelOrder_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Sharp_cancelOrder_result__isset;

class Sharp_cancelOrder_result {
 public:

  static const char* ascii_fingerprint; // = "DC1C3122B8F2BEF805647403197F0FF3";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x1C,0x31,0x22,0xB8,0xF2,0xBE,0xF8,0x05,0x64,0x74,0x03,0x19,0x7F,0x0F,0xF3};

  Sharp_cancelOrder_result(const Sharp_cancelOrder_result&);
  Sharp_cancelOrder_result& operator=(const Sharp_cancelOrder_result&);
  Sharp_cancelOrder_result() {
  }

  virtual ~Sharp_cancelOrder_result() throw();
  OrderResponse success;
  Exception e;

  _Sharp_cancelOrder_result__isset __isset;

  void __set_success(const OrderResponse& val);

  void __set_e(const Exception& val);

  bool operator == (const Sharp_cancelOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Sharp_cancelOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sharp_cancelOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_cancelOrder_result& obj);
};

typedef struct _Sharp_cancelOrder_presult__isset {
  _Sharp_cancelOrder_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Sharp_cancelOrder_presult__isset;

class Sharp_cancelOrder_presult {
 public:

  static const char* ascii_fingerprint; // = "DC1C3122B8F2BEF805647403197F0FF3";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x1C,0x31,0x22,0xB8,0xF2,0xBE,0xF8,0x05,0x64,0x74,0x03,0x19,0x7F,0x0F,0xF3};


  virtual ~Sharp_cancelOrder_presult() throw();
  OrderResponse* success;
  Exception e;

  _Sharp_cancelOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Sharp_cancelOrder_presult& obj);
};


class Sharp_orderStatus_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  Sharp_orderStatus_args(const Sharp_orderStatus_args&);
  Sharp_orderStatus_args& operator=(const Sharp_orderStatus_args&);
  Sharp_orderStatus_args() : o_id(0) {
  }

  virtual ~Sharp_orderStatus_args() throw();
  int64_t o_id;

  void __set_o_id(const int64_t val);

  bool operator == (const Sharp_orderStatus_args & rhs) const
  {
    if (!(o_id == rhs.o_id))
      return false;
    return true;
  }
  bool operator != (const Sharp_orderStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sharp_orderStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_orderStatus_args& obj);
};


class Sharp_orderStatus_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~Sharp_orderStatus_pargs() throw();
  const int64_t* o_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_orderStatus_pargs& obj);
};

typedef struct _Sharp_orderStatus_result__isset {
  _Sharp_orderStatus_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Sharp_orderStatus_result__isset;

class Sharp_orderStatus_result {
 public:

  static const char* ascii_fingerprint; // = "DC1C3122B8F2BEF805647403197F0FF3";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x1C,0x31,0x22,0xB8,0xF2,0xBE,0xF8,0x05,0x64,0x74,0x03,0x19,0x7F,0x0F,0xF3};

  Sharp_orderStatus_result(const Sharp_orderStatus_result&);
  Sharp_orderStatus_result& operator=(const Sharp_orderStatus_result&);
  Sharp_orderStatus_result() {
  }

  virtual ~Sharp_orderStatus_result() throw();
  OrderResponse success;
  Exception e;

  _Sharp_orderStatus_result__isset __isset;

  void __set_success(const OrderResponse& val);

  void __set_e(const Exception& val);

  bool operator == (const Sharp_orderStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Sharp_orderStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sharp_orderStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sharp_orderStatus_result& obj);
};

typedef struct _Sharp_orderStatus_presult__isset {
  _Sharp_orderStatus_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Sharp_orderStatus_presult__isset;

class Sharp_orderStatus_presult {
 public:

  static const char* ascii_fingerprint; // = "DC1C3122B8F2BEF805647403197F0FF3";
  static const uint8_t binary_fingerprint[16]; // = {0xDC,0x1C,0x31,0x22,0xB8,0xF2,0xBE,0xF8,0x05,0x64,0x74,0x03,0x19,0x7F,0x0F,0xF3};


  virtual ~Sharp_orderStatus_presult() throw();
  OrderResponse* success;
  Exception e;

  _Sharp_orderStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Sharp_orderStatus_presult& obj);
};

class SharpClient : virtual public SharpIf {
 public:
  SharpClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SharpClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(PingResponse& _return, const PingRequest& request);
  void send_ping(const PingRequest& request);
  void recv_ping(PingResponse& _return);
  int64_t getOrderID();
  void send_getOrderID();
  int64_t recv_getOrderID();
  void placeOrder(OrderResponse& _return, const ContractRequest& c_req, const OrderRequest& o_req);
  void send_placeOrder(const ContractRequest& c_req, const OrderRequest& o_req);
  void recv_placeOrder(OrderResponse& _return);
  void cancelOrder(OrderResponse& _return, const int64_t o_id);
  void send_cancelOrder(const int64_t o_id);
  void recv_cancelOrder(OrderResponse& _return);
  void orderStatus(OrderResponse& _return, const int64_t o_id);
  void send_orderStatus(const int64_t o_id);
  void recv_orderStatus(OrderResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SharpProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SharpIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SharpProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOrderID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_placeOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_orderStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SharpProcessor(boost::shared_ptr<SharpIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &SharpProcessor::process_ping;
    processMap_["getOrderID"] = &SharpProcessor::process_getOrderID;
    processMap_["placeOrder"] = &SharpProcessor::process_placeOrder;
    processMap_["cancelOrder"] = &SharpProcessor::process_cancelOrder;
    processMap_["orderStatus"] = &SharpProcessor::process_orderStatus;
  }

  virtual ~SharpProcessor() {}
};

class SharpProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SharpProcessorFactory(const ::boost::shared_ptr< SharpIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SharpIfFactory > handlerFactory_;
};

class SharpMultiface : virtual public SharpIf {
 public:
  SharpMultiface(std::vector<boost::shared_ptr<SharpIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SharpMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SharpIf> > ifaces_;
  SharpMultiface() {}
  void add(boost::shared_ptr<SharpIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(PingResponse& _return, const PingRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, request);
    }
    ifaces_[i]->ping(_return, request);
    return;
  }

  int64_t getOrderID() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOrderID();
    }
    return ifaces_[i]->getOrderID();
  }

  void placeOrder(OrderResponse& _return, const ContractRequest& c_req, const OrderRequest& o_req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->placeOrder(_return, c_req, o_req);
    }
    ifaces_[i]->placeOrder(_return, c_req, o_req);
    return;
  }

  void cancelOrder(OrderResponse& _return, const int64_t o_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelOrder(_return, o_id);
    }
    ifaces_[i]->cancelOrder(_return, o_id);
    return;
  }

  void orderStatus(OrderResponse& _return, const int64_t o_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->orderStatus(_return, o_id);
    }
    ifaces_[i]->orderStatus(_return, o_id);
    return;
  }

};

}} // namespace

#endif
