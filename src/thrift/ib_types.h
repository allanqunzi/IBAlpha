/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ib_TYPES_H
#define ib_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace algotrade { namespace api {

class PingRequest;

class PingResponse;

class ContractRequest;

class OrderRequest;

class OrderResponse;

class Exception;


class PingRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PingRequest(const PingRequest&);
  PingRequest& operator=(const PingRequest&);
  PingRequest() {
  }

  virtual ~PingRequest() throw();

  bool operator == (const PingRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PingRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PingRequest& obj);
};

void swap(PingRequest &a, PingRequest &b);


class PingResponse {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PingResponse(const PingResponse&);
  PingResponse& operator=(const PingResponse&);
  PingResponse() {
  }

  virtual ~PingResponse() throw();

  bool operator == (const PingResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PingResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PingResponse& obj);
};

void swap(PingResponse &a, PingResponse &b);


class ContractRequest {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  ContractRequest(const ContractRequest&);
  ContractRequest& operator=(const ContractRequest&);
  ContractRequest() : symbol(), secType(), exchange(), currency() {
  }

  virtual ~ContractRequest() throw();
  std::string symbol;
  std::string secType;
  std::string exchange;
  std::string currency;

  void __set_symbol(const std::string& val);

  void __set_secType(const std::string& val);

  void __set_exchange(const std::string& val);

  void __set_currency(const std::string& val);

  bool operator == (const ContractRequest & rhs) const
  {
    if (!(symbol == rhs.symbol))
      return false;
    if (!(secType == rhs.secType))
      return false;
    if (!(exchange == rhs.exchange))
      return false;
    if (!(currency == rhs.currency))
      return false;
    return true;
  }
  bool operator != (const ContractRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ContractRequest& obj);
};

void swap(ContractRequest &a, ContractRequest &b);


class OrderRequest {
 public:

  static const char* ascii_fingerprint; // = "BDADCF4D7224A335D3343EB69F43C773";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0xAD,0xCF,0x4D,0x72,0x24,0xA3,0x35,0xD3,0x34,0x3E,0xB6,0x9F,0x43,0xC7,0x73};

  OrderRequest(const OrderRequest&);
  OrderRequest& operator=(const OrderRequest&);
  OrderRequest() : action(), totalQuantity(0), orderType(), lmtPrice(0) {
  }

  virtual ~OrderRequest() throw();
  std::string action;
  int64_t totalQuantity;
  std::string orderType;
  double lmtPrice;

  void __set_action(const std::string& val);

  void __set_totalQuantity(const int64_t val);

  void __set_orderType(const std::string& val);

  void __set_lmtPrice(const double val);

  bool operator == (const OrderRequest & rhs) const
  {
    if (!(action == rhs.action))
      return false;
    if (!(totalQuantity == rhs.totalQuantity))
      return false;
    if (!(orderType == rhs.orderType))
      return false;
    if (!(lmtPrice == rhs.lmtPrice))
      return false;
    return true;
  }
  bool operator != (const OrderRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OrderRequest& obj);
};

void swap(OrderRequest &a, OrderRequest &b);

typedef struct _OrderResponse__isset {
  _OrderResponse__isset() : status(true), filled(true), remaining(true), avgFillPrice(true), permId(true), parentId(true), lastFillPrice(true), clientId(true), whyHeld(true) {}
  bool status :1;
  bool filled :1;
  bool remaining :1;
  bool avgFillPrice :1;
  bool permId :1;
  bool parentId :1;
  bool lastFillPrice :1;
  bool clientId :1;
  bool whyHeld :1;
} _OrderResponse__isset;

class OrderResponse {
 public:

  static const char* ascii_fingerprint; // = "DE64BB3AB12A58E9E9ED648EA2133E36";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0x64,0xBB,0x3A,0xB1,0x2A,0x58,0xE9,0xE9,0xED,0x64,0x8E,0xA2,0x13,0x3E,0x36};

  OrderResponse(const OrderResponse&);
  OrderResponse& operator=(const OrderResponse&);
  OrderResponse() : orderId(0), state(0), status(""), filled(0), remaining(0), avgFillPrice(0), permId(0), parentId(0), lastFillPrice(0), clientId(0), whyHeld("") {
  }

  virtual ~OrderResponse() throw();
  int64_t orderId;
  int16_t state;
  std::string status;
  int32_t filled;
  int32_t remaining;
  double avgFillPrice;
  int32_t permId;
  int32_t parentId;
  double lastFillPrice;
  int32_t clientId;
  std::string whyHeld;

  _OrderResponse__isset __isset;

  void __set_orderId(const int64_t val);

  void __set_state(const int16_t val);

  void __set_status(const std::string& val);

  void __set_filled(const int32_t val);

  void __set_remaining(const int32_t val);

  void __set_avgFillPrice(const double val);

  void __set_permId(const int32_t val);

  void __set_parentId(const int32_t val);

  void __set_lastFillPrice(const double val);

  void __set_clientId(const int32_t val);

  void __set_whyHeld(const std::string& val);

  bool operator == (const OrderResponse & rhs) const
  {
    if (!(orderId == rhs.orderId))
      return false;
    if (!(state == rhs.state))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.filled != rhs.__isset.filled)
      return false;
    else if (__isset.filled && !(filled == rhs.filled))
      return false;
    if (__isset.remaining != rhs.__isset.remaining)
      return false;
    else if (__isset.remaining && !(remaining == rhs.remaining))
      return false;
    if (__isset.avgFillPrice != rhs.__isset.avgFillPrice)
      return false;
    else if (__isset.avgFillPrice && !(avgFillPrice == rhs.avgFillPrice))
      return false;
    if (__isset.permId != rhs.__isset.permId)
      return false;
    else if (__isset.permId && !(permId == rhs.permId))
      return false;
    if (__isset.parentId != rhs.__isset.parentId)
      return false;
    else if (__isset.parentId && !(parentId == rhs.parentId))
      return false;
    if (__isset.lastFillPrice != rhs.__isset.lastFillPrice)
      return false;
    else if (__isset.lastFillPrice && !(lastFillPrice == rhs.lastFillPrice))
      return false;
    if (__isset.clientId != rhs.__isset.clientId)
      return false;
    else if (__isset.clientId && !(clientId == rhs.clientId))
      return false;
    if (__isset.whyHeld != rhs.__isset.whyHeld)
      return false;
    else if (__isset.whyHeld && !(whyHeld == rhs.whyHeld))
      return false;
    return true;
  }
  bool operator != (const OrderResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const OrderResponse& obj);
};

void swap(OrderResponse &a, OrderResponse &b);

typedef struct _Exception__isset {
  _Exception__isset() : what(false), why(false) {}
  bool what :1;
  bool why :1;
} _Exception__isset;

class Exception : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Exception(const Exception&);
  Exception& operator=(const Exception&);
  Exception() : what(0), why() {
  }

  virtual ~Exception() throw();
  int32_t what;
  std::string why;

  _Exception__isset __isset;

  void __set_what(const int32_t val);

  void __set_why(const std::string& val);

  bool operator == (const Exception & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const Exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Exception & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Exception& obj);
};

void swap(Exception &a, Exception &b);

}} // namespace

#endif
