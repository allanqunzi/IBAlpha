// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Sharp.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::sharp::api;

class SharpHandler : virtual public SharpIf {
 public:
  SharpHandler() {
    // Your initialization goes here
  }

  void ping(PingResponse& _return, const PingRequest& request) {
    // Your implementation goes here
    printf("ping\n");
  }

  int64_t getOrderID() {
    // Your implementation goes here
    printf("getOrderID\n");
  }

  void placeOrder(OrderResponse& _return, const ContractRequest& c_req, const OrderRequest& o_req) {
    // Your implementation goes here
    printf("placeOrder\n");
  }

  void cancelOrder(OrderResponse& _return, const int64_t o_id) {
    // Your implementation goes here
    printf("cancelOrder\n");
  }

  void getOrderStatus(OrderStatus& _return, const int64_t o_id) {
    // Your implementation goes here
    printf("getOrderStatus\n");
  }

  void reqOpenOrders(std::vector<OrderStatus> & _return) {
    // Your implementation goes here
    printf("reqOpenOrders\n");
  }

  void reqAllOpenOrders(std::vector<OrderStatus> & _return) {
    // Your implementation goes here
    printf("reqAllOpenOrders\n");
  }

  void reqGlobalCancel() {
    // Your implementation goes here
    printf("reqGlobalCancel\n");
  }

  void reqExecutions(std::vector<ExecutedContract> & _return, const ExecutionFilter& ef) {
    // Your implementation goes here
    printf("reqExecutions\n");
  }

  void reqRealTimeBars() {
    // Your implementation goes here
    printf("reqRealTimeBars\n");
  }

  void addToWatchList(std::vector<int32_t> & _return, const std::vector<std::string> & wl) {
    // Your implementation goes here
    printf("addToWatchList\n");
  }

  void removeFromWatchList(const std::vector<std::string> & rm) {
    // Your implementation goes here
    printf("removeFromWatchList\n");
  }

  void removeZombieSymbols(const std::vector<std::string> & rm) {
    // Your implementation goes here
    printf("removeZombieSymbols\n");
  }

  void getNextBar(RealTimeBar& _return, const std::string& symbol) {
    // Your implementation goes here
    printf("getNextBar\n");
  }

  void reqHistoricalData(std::map<int64_t, std::string> & _return, const HistoryRequest& request) {
    // Your implementation goes here
    printf("reqHistoricalData\n");
  }

  void cancelHistoricalData(const int64_t tickerId) {
    // Your implementation goes here
    printf("cancelHistoricalData\n");
  }

  void reqStkPositions(std::map<std::string, StkPosition> & _return, const bool refresh) {
    // Your implementation goes here
    printf("reqStkPositions\n");
  }

  void reqOptPositions(std::map<int64_t, OptPosition> & _return, const bool refresh) {
    // Your implementation goes here
    printf("reqOptPositions\n");
  }

  void cancelPositions() {
    // Your implementation goes here
    printf("cancelPositions\n");
  }

  void reqAccountUpdates(std::map<std::string, std::string> & _return, const bool subscribe, const std::string& acctCode, const bool refresh) {
    // Your implementation goes here
    printf("reqAccountUpdates\n");
  }

  void reqPortfolio(std::map<int64_t, Asset> & _return, const bool subscribe, const std::string& acctCode, const bool refresh) {
    // Your implementation goes here
    printf("reqPortfolio\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SharpHandler> handler(new SharpHandler());
  shared_ptr<TProcessor> processor(new SharpProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

