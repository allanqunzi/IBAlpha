// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Sharp.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::sharp::api;

class SharpHandler : virtual public SharpIf {
 public:
  SharpHandler() {
    // Your initialization goes here
  }

  void ping(PingResponse& _return, const PingRequest& request) {
    // Your implementation goes here
    printf("ping\n");
  }

  int64_t getOrderID() {
    // Your implementation goes here
    printf("getOrderID\n");
  }

  void placeOrder(OrderResponse& _return, const ContractRequest& c_req, const OrderRequest& o_req) {
    // Your implementation goes here
    printf("placeOrder\n");
  }

  void cancelOrder(OrderResponse& _return, const int64_t o_id) {
    // Your implementation goes here
    printf("cancelOrder\n");
  }

  void orderStatus(OrderResponse& _return, const int64_t o_id) {
    // Your implementation goes here
    printf("orderStatus\n");
  }

  bool requestRealTimeBars() {
    // Your implementation goes here
    printf("requestRealTimeBars\n");
  }

  bool addToWatchList(const std::vector<std::string> & wl) {
    // Your implementation goes here
    printf("addToWatchList\n");
  }

  bool removeFromWatchList(const std::vector<std::string> & rm) {
    // Your implementation goes here
    printf("removeFromWatchList\n");
  }

  void getNextBar(RealTimeBar& _return, const std::string& symbol) {
    // Your implementation goes here
    printf("getNextBar\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SharpHandler> handler(new SharpHandler());
  shared_ptr<TProcessor> processor(new SharpProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

